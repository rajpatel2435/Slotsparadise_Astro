---
/* export const prerender = true; */
import Layout from "../layouts/Layout.astro";
import Archive from "../components/templates/Archive.astro";
import Single from "../components/templates/Single.astro";
import SingleNewsArticle from "../components/templates/SingleNewsArticle.astro";
import SingleGamePage from "../components/templates/SingleGamePage.astro";
import NewsArchiveCategory from "../components/templates/NewsArchiveCategory.astro";
import SingleCasinoSchool from "../components/templates/SingleCasinoSchool.astro";
import { getNodeByURI, getAllUris } from "../lib/api";
import SingleKnowledgeBase from "../components/templates/SingleKnowledgeBase.astro";
import GuidesSectionArchive from "../components/templates/GuidesSectionArchive.astro";
import { cache } from "../cacheUtils.js";

const uri = `/${Astro.params.uri}/`;
let node = null;
let Template = Archive;

try {
  const data = await getNodeByURI(uri);
  node = data.nodeByUri;

  if (!node) {
    console.error("Node not found");
    Astro.response.status = 404;
    Astro.response.statusText = "Not found";
  } else if (node.uri !== uri) {
    console.error("URI mismatch");
    Astro.response.status = 404;
    Astro.response.statusText = "Not found";
  } else {
    console.log("URI matches");

    // Redirects
    const requestedPath = "/the-beach" + new URL(Astro.request.url).pathname;
    const credentials = "bmthaXJvQHBhY2lmaWNkZXYuY29tOlFBNzMgMG5nbCBjSVM0IHV5U20gQnRlOCBvUjJR";
    let cachedRedirects = cache.get("redirectCache");

    try {
      if (!cachedRedirects) {
        console.log("Fetching redirects");
        const response = await fetch(
          "https://slotsparadise.com/wp-json/redirection/v1/export/all/json",
          {
            headers: {
              Authorization: `Basic ${credentials}`, // Set Authorization header
            },
          },
        );

        if (!response.ok) {
          throw new Error("Failed to fetch redirects data");
        }

        const responseData = await response.json();
        cachedRedirects = JSON.parse(responseData.data);
        cache.set("redirectCache", cachedRedirects, 3600);
      }

      const redirect = cachedRedirects.redirects.find(
        (item) => item.url === requestedPath,
      );

      if (redirect && redirect.enabled) {
        return Astro.redirect(redirect.action_data.url, 301);
      } else {
        console.log(
          redirect
            ? "Redirect rule is not enabled for the requested path:"
            : "No redirection found for the requested path:",
          requestedPath,
        );
      }
    } catch (error) {
      console.error("Error fetching redirects data:", error);
    }

    // Resolve the template
    Template = resolveContentTemplate(node);
  }
} catch (error) {
  console.error("Error fetching data:", error);
  Astro.response.status = 500;
  Astro.response.statusText = "Internal Server Error";
}

export async function getStaticPaths() {
  return await getAllUris();
}

function resolveContentTemplate(node) {
  if (!node || node.uri !== uri) {
    return Archive;
  }
  switch (node.__typename) {
    case "Post":
      return uri.includes("news") ? SingleNewsArticle : SingleGamePage;
    case "Category":
      return uri.includes("news") ? NewsArchiveCategory : Archive;
    case "Page":
      return uri.includes("casino-school") ? SingleCasinoSchool : Single;
    case "Basepress":
      return SingleKnowledgeBase;
    case "SectionBasepress":
      return GuidesSectionArchive;
    case "Tag":
      return Archive;
    default:
      return Single;
  }
}
---
<Layout title={node ? node.title || node.name : "Page Not Found"}>
  <main>
    {node ? <Template node={node} /> : <p>Page Not Found</p>}
  </main>
</Layout>
