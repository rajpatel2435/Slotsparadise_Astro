---
import { seoNodeByURI } from '../lib/seo';

// Set the URI based on whether it's the main page or a specific URI
// Get the full URL from Astro.request.url
const fullUrl = Astro.request.url;

// Extract the path from the URL
const path = new URL(fullUrl).pathname;

// Define a mapping of URI patterns to their transformed equivalents
const uriTransformations = {
  'casino/slots': 'casino/casino_slots',
  'casino/jackpot-games': 'casino/casino_jackpot-games',
  'casino/video-poker': 'casino/casino_video-poker',
  'casino/table-games': 'casino/casino_table-games',
  'casino/roulette' : 'casino/casino_roulette',
  'casino/blackjack': 'casino/casino_blackjack',
  'casino/live-dealer': 'casino/casino_live-dealer',
};


//  URI based on the path
let uri;
if (path === '/') {
  uri = '/';
} else {
  uri = path.endsWith('/') ? path : `${path}/`;
}

// Transform the URI based on the defined mapping
for (const [key, value] of Object.entries(uriTransformations)) {
  if (uri.includes(key)) {
    uri = uri.replace(key, value);
    break;  // Stop once a match is found and replaced
  }
}

const data = await seoNodeByURI(uri);

const node = data.nodeByUri && data.nodeByUri.seo ? data.nodeByUri : null;

const seo = node ? node.seo : null;

let canonicalUrl = seo?.canonical;
for (const [key, value] of Object.entries(uriTransformations)) {
  if (canonicalUrl?.includes(value)) {
    canonicalUrl = canonicalUrl.replace(value, key);
    break;  // Stop once a match is found and replaced
  }
}



//console.log(seo);
---

<meta name="description" content={seo?.metaDesc} />
<link rel="canonical" href={canonicalUrl} />
<meta property="og:locale" content="en_US" />
<meta name="robots" content=`${seo?.metaRobotsNofollow},${seo?.metaRobotsNoindex}` />
<meta property="og:type" content={seo?.opengraphType} />
<meta property="og:title" content={seo?.title} />
<meta property="og:description" content={seo?.opengraphDescription} />
<meta property="og:url" content={seo?.opengraphUrl} />
<meta property="og:site_name" content={seo?.opengraphSiteName} />
<meta property="article:published_time" content={seo?.opengraphPublishedTime} />
<meta property="article:modified_time" content={seo?.opengraphModifiedTime} />
<meta property="og:image" content={seo?.opengraphImage?.sourceUrl} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="667" />
<meta property="og:image:type" content={seo?.opengraphImage?.mimeType} />
<meta name="author" content={seo?.opengraphImage?.author?.node?.name} />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:label1" content="Written by" />
<meta name="twitter:data1" content={seo?.opengraphImage?.author?.node?.name} />
<meta name="twitter:label2" content="Est. reading time" />
<meta name="twitter:data2" content=`${seo?.readingTime} minutes` />
<script type="application/ld+json" class="yoast-schema-graph" set:html={seo?.schema.raw}>
</script>
