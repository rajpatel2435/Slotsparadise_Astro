---
import { wpquery } from "../data/wordpress";
import SocialShare from "../components/SocialShare.astro";
const slug = Astro.params.uri; // Get the slug from the URL
//console.log("Original Slug:", slug); // Log the original slug
const slugParts = slug.split("/").filter(Boolean);
//console.log("Slug Parts:", slugParts); // Log the parts after splitting
const lastPart = slugParts.pop(); // Extract the last part of the slug
//console.log("Last Part:", lastPart);

const data = await wpquery({
  query: `query GetPostsBySlug($name: String!) {
  posts(where: {name: $name}) {
    edges {
      node {
        id
        quickOverview {
          charLists
          charTitle
        }
      }
    }
  }
}`,
  variables: { name: lastPart }, // Pass the last part of the slug as the title
});

//console.log(data.posts.edges[0].node.quickOverview);

const val = data.posts.edges[0].node.quickOverview;

const charlist = val.charLists;
const chartitle = val.charTitle;


---

<!-- <div>
  {
    posts.map((post) => (
      <article>
        {post.node.blocks.map((block, index) => {
          if (
            index === post.node.blocks.length - 1 &&
            block.attributesJSON === "[]"
          ) {
            // Check if it's the last block and has attributesJSON as "[]"
            const processedContent = block.dynamicContent
              .replace(/\[gameinfo\]/g, "") // Remove opening shortcode
              .replace(/\[\/gameinfo\]/g, "") // Remove closing shortcode
              .replace(/<br \/>/g, "") // Remove <br /> tags
              .replace(/<\/?p>/g, ""); // Remove <p> and </p> tags

            // Split processed content into lines and filter out empty lines
            const lines = processedContent
              .split("\n")
              .filter((line) => line.trim() !== "");

            return (
              <div class="char-table">
                <table class="game-table">
                  <caption>Characteristics</caption>
                  <tbody>
                    {lines.map((line) => (
                      <tr>
                        <td>{line}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            );
          }
          return null; // Return null for other blocks
        })}
      </article>
    ))
  }
</div> -->



<div class="char-table">
  <table class="game-table">
    {chartitle && (
      <caption>{chartitle}</caption>
    )}
    <tbody>
      {charlist
        ?.split("\n")
        .filter(Boolean)
        .map((char: string, index: number) => (
          <tr>
            <td>{char.trim()}</td>
          </tr>
        ))}
    </tbody>
  </table>
</div>

